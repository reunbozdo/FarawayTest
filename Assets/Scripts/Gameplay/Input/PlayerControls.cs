//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Gameplay/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GameActionMap"",
            ""id"": ""a966fd0f-9bea-4ebc-9f9c-0f55e6ee3fae"",
            ""actions"": [
                {
                    ""name"": ""LaneChangeSwipe"",
                    ""type"": ""Value"",
                    ""id"": ""d0a43523-6986-45a8-a66a-e3f615c6907e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LaneChangeTap"",
                    ""type"": ""Button"",
                    ""id"": ""bb3acac4-bcf0-40ee-81df-27d94282eaeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22037386-b8cb-409a-ac83-c0c045211209"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LaneChangeSwipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d232aa6-edff-4de9-a0a3-4ca587638cb9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LaneChangeTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""502d1fbc-2cfd-4104-bd28-058731bb3893"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""feca1d19-c232-44dc-8ed6-067761e6f2e8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""9eec1c6a-7278-424d-99a4-a80eb601756e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""de45350a-44b9-467c-a7eb-707f7a974e8c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25b4f45c-b23c-4997-b1f4-25154f70aab9"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87718179-deae-4e54-bb3a-886b38e33b65"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4d09094-3ab5-4d66-9b78-3f9f8c478fff"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameActionMap
        m_GameActionMap = asset.FindActionMap("GameActionMap", throwIfNotFound: true);
        m_GameActionMap_LaneChangeSwipe = m_GameActionMap.FindAction("LaneChangeSwipe", throwIfNotFound: true);
        m_GameActionMap_LaneChangeTap = m_GameActionMap.FindAction("LaneChangeTap", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
        m_Touch_TouchContact = m_Touch.FindAction("TouchContact", throwIfNotFound: true);
        m_Touch_TouchDelta = m_Touch.FindAction("TouchDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameActionMap
    private readonly InputActionMap m_GameActionMap;
    private List<IGameActionMapActions> m_GameActionMapActionsCallbackInterfaces = new List<IGameActionMapActions>();
    private readonly InputAction m_GameActionMap_LaneChangeSwipe;
    private readonly InputAction m_GameActionMap_LaneChangeTap;
    public struct GameActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public GameActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LaneChangeSwipe => m_Wrapper.m_GameActionMap_LaneChangeSwipe;
        public InputAction @LaneChangeTap => m_Wrapper.m_GameActionMap_LaneChangeTap;
        public InputActionMap Get() { return m_Wrapper.m_GameActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Add(instance);
            @LaneChangeSwipe.started += instance.OnLaneChangeSwipe;
            @LaneChangeSwipe.performed += instance.OnLaneChangeSwipe;
            @LaneChangeSwipe.canceled += instance.OnLaneChangeSwipe;
            @LaneChangeTap.started += instance.OnLaneChangeTap;
            @LaneChangeTap.performed += instance.OnLaneChangeTap;
            @LaneChangeTap.canceled += instance.OnLaneChangeTap;
        }

        private void UnregisterCallbacks(IGameActionMapActions instance)
        {
            @LaneChangeSwipe.started -= instance.OnLaneChangeSwipe;
            @LaneChangeSwipe.performed -= instance.OnLaneChangeSwipe;
            @LaneChangeSwipe.canceled -= instance.OnLaneChangeSwipe;
            @LaneChangeTap.started -= instance.OnLaneChangeTap;
            @LaneChangeTap.performed -= instance.OnLaneChangeTap;
            @LaneChangeTap.canceled -= instance.OnLaneChangeTap;
        }

        public void RemoveCallbacks(IGameActionMapActions instance)
        {
            if (m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActionMapActions @GameActionMap => new GameActionMapActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_TouchPosition;
    private readonly InputAction m_Touch_TouchContact;
    private readonly InputAction m_Touch_TouchDelta;
    public struct TouchActions
    {
        private @PlayerControls m_Wrapper;
        public TouchActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
        public InputAction @TouchContact => m_Wrapper.m_Touch_TouchContact;
        public InputAction @TouchDelta => m_Wrapper.m_Touch_TouchDelta;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @TouchContact.started += instance.OnTouchContact;
            @TouchContact.performed += instance.OnTouchContact;
            @TouchContact.canceled += instance.OnTouchContact;
            @TouchDelta.started += instance.OnTouchDelta;
            @TouchDelta.performed += instance.OnTouchDelta;
            @TouchDelta.canceled += instance.OnTouchDelta;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @TouchContact.started -= instance.OnTouchContact;
            @TouchContact.performed -= instance.OnTouchContact;
            @TouchContact.canceled -= instance.OnTouchContact;
            @TouchDelta.started -= instance.OnTouchDelta;
            @TouchDelta.performed -= instance.OnTouchDelta;
            @TouchDelta.canceled -= instance.OnTouchDelta;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface IGameActionMapActions
    {
        void OnLaneChangeSwipe(InputAction.CallbackContext context);
        void OnLaneChangeTap(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchContact(InputAction.CallbackContext context);
        void OnTouchDelta(InputAction.CallbackContext context);
    }
}
